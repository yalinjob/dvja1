name: Checkmarx One Scan
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug

  push:
    branches:
      - main
      - master
      - dev
  pull_request:
    branches:
      - main
      - master
      - dev
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Download SCA Resolver
        run: |
          wget https://sca-downloads.s3.amazonaws.com/cli/latest/ScaResolver-linux64.tar.gz
          tar -xzvf ScaResolver-linux64.tar.gz
          rm -rf ScaResolver-linux64.tar.gz

          
      - name: Checkmarx One CLI Action
        uses: checkmarx/ast-github-action@main #Github Action version
        with:
          project_name:  ${{ github.repository }}
          cx_tenant: yalin_demo
          base_uri: https://eu.ast.checkmarx.net
          cx_client_id: ${{ secrets.CLIENT_ID }}
          cx_client_secret: ${{ secrets.SECRET }}          
          additional_params: --sast-incremental --scan-types sast,sca,kics --sast-filter "!**/node_modules/**,!**/tests/**,!**/*.test.*,!.svn,!.hg,!.git,!.bzr,!bin,!obj,!backup,!.idea,!Tools,!**/*.DS_Store,!**/*.ipr,!**/*.iws,!**/*.bak,!**/*.tmp,!**/*.aac,!**/*.aif,!**/*.iff,!**/*.m3u,!**/*.mid,!**/*.mp3,!**/*.mpa,!**/*.ra,!**/*.wav,!**/*.wma,!**/*.3g2,!**/*.3gp,!**/*.asf,!**/*.asx,!**/*.avi,!**/*.flv,!**/*.mov,!**/*.mp4,!**/*.mpg, !**/*.rm,!**/*.swf,!**/*.vob,!**/*.wmv,!**/*.bmp,!**/*.gif,!**/*.jpg,!**/*.png,!**/*.psd,!**/*.tif,!**/*.swf,!**/*.jar,!**/*.zip,!**/*.rar,!**/*.exe,!**/*.dll,!**/*.pdb, !**/*.7z,!**/*.gz,!**/*.tar.gz,!**/*.tar,!**/*.gz,!**/*.ahtm,!**/*.ahtml,!**/*.fhtml,!**/*.hdm,!**/*.hdml,!**/*.hsql,!**/*.ht,!**/*.hta,!**/*.htc,!**/*.htd,!**/*.war,!**/*.ear,!**/*.htmls,!**/*.ihtml,!**/*.mht,!**/*.mhtm,!**/*.mhtml,!**/*.ssi,!**/*.stm,!**/*.stml,!**/*.ttml,!**/*.txn,!**/*.xhtm,!**/*.xhtml,!**/*.class,!**/*.iml"

      - name: Maven Build
        run: mvn clean install          
        
      - name: Login to Docker Hub with Access Token
        run: echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: yalina/yalina:myapp
          
      - name: Install JFrog CLI
        run: |
          curl -fL https://getcli.jfrog.io | sh

      - name: Configure JFrog CLI
        run: |
          jfrog rt config --interactive=false --url="https://soleng.jfrog.io/artifactory/devnet-ya--virtual-version1/" ----access-token="eyJ2ZXIiOiIyIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYiLCJraWQiOiJsYkpadzNJUU13WXBBSWNRa01RRjN0dlA2Yml5M3dWcXdrQ0txUkxLaXhRIn0.eyJzdWIiOiJqZmFjQDAxZTlycTMza3ljMHQxMWtwangybmcwemo1L3VzZXJzL3lhbGluYSIsInNjcCI6ImFwcGxpZWQtcGVybWlzc2lvbnMvdXNlciIsImF1ZCI6IipAKiIsImlzcyI6ImpmZmVAMDFlOXJxMzNreWMwdDExa3BqeDJuZzB6ajUiLCJpYXQiOjE3MTU1MTM4OTAsImp0aSI6IjFmMzgzMDIwLTA3NzItNGY5OC1hYmFiLTI1NDkzM2Y1MzFhYiJ9.fDQKcO8JgzhfzNKjrVHQzA8r4tkTWR2IQBe5LCJlJiRaXmf1uN3z8Q4VstgOWISW57Qi3kKbhEQHdlx3pa9jjUxn4MFpv6SC7hQSzmmPkA4n_pukEKHX2Zdy0JKMVm27GCy6xFPbVHx2x9cBmCTNxT65Zad95kfbcZhATMiz3qNB0oVF40lvu3iIlgpIzR3NITRDMixfQaL2wkEk9F-g-T_STPhyTZgGgcrzCXeti_x9Z5xQo2-U7sKtg5ZfsQ1e2BQT4_dIXVyKu0BJsMiFvj6wARfdxJcmssuGW_JzpZ8z4VAJ_r_bHmidw0k5RK2RCMmlLsEWv4qre1W0YmWfXw"  --interactive=false

      - name: Push Docker image to Artifactory
        run: |
          jfrog rt docker-push yalina/yalina:myapp devnet-ya--virtual-version1/yalina:myapp
